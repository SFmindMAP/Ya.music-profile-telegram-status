import requests
import time
import telethon
from telethon.sync import TelegramClient
from yandex_music import Client
from yandex_music.exceptions import NetworkError
import asyncio
import aiohttp
import aiofiles
from telethon import functions, types
from telethon.tl.functions.photos import DeletePhotosRequest
from telethon.tl.functions.channels import DeleteMessagesRequest
from telethon.tl.types import InputPeerChannel
from telethon.errors import FloodWaitError

# —Å—é–¥–∞ –≤—Å—è –∏–Ω—Ñ–∞ ##
api_id = ''
api_hash = ''
music_token = ''
stock_tgk = 't.me/'
new_tgk = 't.me/'
###################

client_tele = TelegramClient('my_account', api_id, api_hash)
client_music = Client(music_token).init()

default = ''
count = 0
wave = False

# –∫–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª
async def update_personal_channel(channel_id):
    async with client_tele as client:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        channel = await client.get_entity(channel_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        result = await client(functions.account.UpdatePersonalChannelRequest(
            channel=types.InputChannel(channel.id, channel.access_hash)
        ))
        print(f"–õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {channel_id}:", result )

# function –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cover/title/mesage
async def TelegramUpdatState(new_tgk, title, artists, img_uri):
    async with client_tele as client:
        # 0 –ß–∞—Å—Ç—å: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiohttp.ClientSession() as session:
            async with session.get(img_uri) as response:
                if response.status == 200:
                    async with aiofiles.open("cover.jpeg", 'wb') as file:
                        await file.write(await response.read())
                    print(f'\n–æ–±–ª–æ–∂–∫–∞ —Å–∫–∞—á–∞–Ω–æ')
                else:
                    print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É')

        # –ß–∞—Å—Ç—å 1: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–∞–ª–∞
        photos = await client.get_profile_photos(new_tgk)
        await client(DeletePhotosRequest(photos))
        print(f'–£–¥–∞–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–∞–ª–∞ {new_tgk}')

        # –ß–∞—Å—Ç—å 2: –ó–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–∞–ª–∞
        result = await client(functions.channels.EditPhotoRequest(
            channel=new_tgk,
            photo=await client.upload_file('cover.jpeg')
        ))
        print('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')

        # –ß–∞—Å—Ç—å 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞
        channel = await client.get_entity(new_tgk)
    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if channel.title != title:
            await client(functions.channels.EditTitleRequest(new_tgk, title))
            print('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞:', title)
        else:
            print("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")

        # –ß–∞—Å—Ç—å 4: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        channel = await client.get_input_entity(new_tgk)
        messages = await client.get_messages(channel, limit=None)
        message_ids = [msg.id for msg in messages]
        await client(DeleteMessagesRequest(channel, message_ids))
        print(f'–£–¥–∞–ª–µ–Ω–æ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π.')

        # –ß–∞—Å—Ç—å 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        txt = f"Now listening: {title} - {artists}"
        await client.send_message(new_tgk, txt)
        await client.send_message(new_tgk, artists)
        print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')

# main –ß–∞—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ (—è.–º—É–∑—ã–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞)
async def main():
    global default, count, wave
    try:
        wave = False
        queues = client_music.queues_list()
        try:
            last_queue = client_music.queue(queues[0].id)
        except TypeError:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ–µ–π –≤–æ–ª–Ω—ã")
            await update_personal_channel(stock_tgk)
            return
        last_track_id = last_queue.get_current_track()
        last_track = last_track_id.fetch_track()
        artists = ', '.join(last_track.artists_name())
        title = last_track.title
        # üëá –ò –ó–ê –≠–¢–û–ô –ì–†–ï–ë–ê–ù–û–ô –°–¢–†–û–ö–ò –Ø –ü–†–û#–†–ê–õ 2 –ß–ê–°–ê
        img_uri = f"https://{last_track.cover_uri[:-2]}1000x1000"
        if default != title:
            default = title
            try:
                await TelegramUpdatState(new_tgk, title, artists, img_uri)
                await update_personal_channel(new_tgk)
            except FloodWaitError as e:
                print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram. –ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥.")
                await update_personal_channel(stock_tgk)
                await asyncio.sleep(e.seconds) # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                return await TelegramUpdatState(new_tgk, title, artists, img_uri)
            # print(img_uri)
        else:
            if count < 5:
                count += 1
            else:
                count = 0
                await update_personal_channel(stock_tgk)
    # –µ—Å–ª–∏ —è –≤–æ—Ç —ç—Ç–æ —Å–Ω–∏–∑—É —É–¥–∞–ª—é —Ç–æ —Ç–æ–≥–¥–∞ –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    # –∫—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–∏–∫—Å –∏ comit ;)
    except (IndexError, errors.AboutTooLongError):
        stock_bio = ''
        if wave:
            pass
        else:
            wave = True
            await client_tele(functions.account.UpdateProfileRequest(
                about=f"{stock_bio}"
            ))


# —á–µ–∫–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def check_internet():
    url = 'http://www.ya.ru/'
    timeout = 30
    try:
        _ = requests.get(url, timeout=timeout)
        return True
    except requests.ConnectionError:
        print('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')
        return False

class NetworkError(Exception):
    pass

# –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:
async def main_loop():
    while True:
        if check_internet():
            try:
                await main()
            except NetworkError:
                print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...')
                await asyncio.sleep(30)
                continue
        await asyncio.sleep(80)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main_loop())
